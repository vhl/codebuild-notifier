#!/usr/bin/env ruby

require 'aws-sdk-dynamodb'
require 'aws-sdk-secretsmanager'
require 'slack-ruby-client'

# This script updates a DynamoDb table with the last codebuild build status
# for the current project and branch or pr. If the current build status is
# different from the previous status, the email address of the author of the
# last commit is extracted from the git commit, and a notification is sent
# via slack.

## Values extracted from CODEBUILD_* ENV vars present in each CodeBuild
# job container.
def commit_hash
  ENV['CODEBUILD_RESOLVED_SOURCE_VERSION']
end

def current_status
  ENV['CODEBUILD_BUILD_SUCCEEDING'].to_s == '1' ? 'SUCCEEDED' : 'FAILED'
end

def project_code
  ENV['CODEBUILD_BUILD_ID'].split(':').first
end

def trigger
  # Uses .to_s to ensure consistent behaviour when ENV var does not exist,
  # and when it exists but has no value.
  ENV['CODEBUILD_WEBHOOK_TRIGGER'].to_s
end

def region
  ENV['AWS_REGION']
end

## Configuration values specific to CodeBuild Notifier. CB_ prefix is
# used because ENV vars with CODEBUILD_ prefix are reserved for use by AWS.

def dynamo_table_name
  ENV['CB_NOTIFIER_DYNAMO_TABLE_NAME'] || 'branch-build-status'
end

def secrets_manager_slack_secret_name
  ENV['CB_NOTIFIER_SLACK_SECRET_NAME'] || 'slack/code-build'
end

def whitelisted_branches
  env_branch_names = ENV['CB_NOTIFIER_NON_PULL_REQUEST_BRANCHES']
  env_branch_names&.split(',') || %w[master release]
end

def cb_puts(message)
  puts "CODEBUILD NOTIFIER: #{message}"
end

non_pr_branches = whitelisted_branches.map do |branch_name|
  "branch/#{branch_name}"
end
whitelist = whitelisted_branches.join(', ')

# webhook = 'https://hooks.slack.com/services/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'
dynamo_client = Aws::DynamoDB::Client.new(region: region)

# If trigger is empty, this build was launched using the Retry command from
# the console or api, so we don't have a pr or branch name in the env vars.
# The commit hash and project code are used to find which pr or branch this
# commit belongs to, and its previous status.
if trigger.empty?
  query_response = dynamo_client.query(
    expression_attribute_values: {
      ':commit_hash' => commit_hash,
      ':project_code' => project_code
    },
    filter_expression: 'project_code = :project_code',
    index_name: 'commit_hash_index',
    key_condition_expression: 'commit_hash = :commit_hash',
    table_name: dynamo_table_name
  )
  results = query_response.items
  # Whenever a build is triggered by a PR or whitelisted branch, we update
  # the record for that trigger with the commit hash. If a build is then
  # launched using Retry, the status is updated, and notifications sent,
  # only if the re-tried build was for the latest commit. Otherwise re-trying
  # an older commit could result in inaccurate notifications.
  if results.empty?
    cb_puts "Commit #{commit_hash} in project #{project_code} did not match " \
            'the most recent commit for any Pull Requests or the whitelisted ' \
            "branches: #{whitelist}. Skipping status updates."
    exit
  else
    existing_item = results.first
    source_id = existing_item['source_id']
  end
else
  # We only want to track information for branches with open PRs, except for
  # master and release branches.
  unless non_pr_branches.include?(trigger) || trigger =~ %r{^pr/}
    cb_puts 'Build is neither for a Pull Request nor for one of whitelisted ' \
            "branches: #{whitelist}. Skipping status updates."
    exit
  end

  # source_id, the primary key is a composite of project_code and
  # webook_trigger.
  # e.g.:
  #   my-app_ruby2-4:branch/master
  #   my-app_ruby2-3:pr/4056
  # project_code forms part of the key to support having repos with
  # multiple projects, for example, with different buildspec files for
  # different ruby versions, or for rspec vs cucumber.
  source_id = "#{project_code}:#{trigger}"

  existing_item_response = dynamo_client.get_item(
    key: { 'source_id' => source_id },
    table_name: dynamo_table_name
  )
  existing_item = existing_item_response.item
end

old_status = existing_item && existing_item['status']

# Update record for this project + branch/pr in DynamoDb even if the
# status hasn't changed, so the latest commit hash is stored.
new_item = {
  commit_hash: commit_hash,
  project: project_code,
  source_id: source_id,
  status: current_status
}.tap do |memo|
  # If launched via manual re-try instead of via a webhook, we don't want
  # to overwrite the current source_ref value that tells us which branch or
  # pull request originally created the dynamo record.
  memo[:source_ref] = trigger if trigger != ''
end

cb_puts "Updating dynamo table #{dynamo_table_name} with: #{new_item.inspect}"

dynamo_client.put_item(
  item: new_item,
  table_name: dynamo_table_name
)

# We assume this is getting executed from the git working directory
# puts `git show #{ENV['CODEBUILD_RESOLVED_SOURCE_VERSION']}`

if old_status != current_status
  committer_email = `git show -s --format='%aE'`.chomp
  cb_puts committer_email
end
